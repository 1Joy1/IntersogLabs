<?php

namespace app\controllers;


use yii\rest\ActiveController;
use yii\helpers\ArrayHelper;
use yii\web\BadRequestHttpException;

use yii\filters\auth\CompositeAuth;
use yii\filters\auth\HttpBasicAuth;
use yii\filters\auth\HttpBearerAuth;



 
class CommonActiveController extends ActiveController
{
    public $searchModel = Null;
    public $searchAttr = Null;
    
    
    public $reservedParams = ['sort','q'];
    
    public function isAdmin()
    {
        if (\Yii::$app->user->identity->role ==='admin') {
            return true;
        }
    }
    

    
    public function actions() 
    {
        $actions = parent::actions();
        // Переопределяем 'prepareDataProvider' из indexAction
        $actions['index']['prepareDataProvider'] = [$this, 'indexDataProvider'];
        return $actions;
    }

    public function indexDataProvider() 
    {
        $params = \Yii::$app->request->queryParams;

        $model = new $this->modelClass;
        // Здесь я использую yii\base\Model::getAttributes()
        // в реальном приложении я бы предпочел правильно назначить $model->scenario 
        // а затем использовать  $model->safeAttributes() вместо этого.
        $modelAttr = $model->attributes;

        // Здесь содержится массив атрибутов фильтрации ( 'name' => 'value' )
        $search = [];

        if (!empty($params)) {
            foreach ($params as $key => $value) {
                // In case if you don't want to allow wired requests
                // holding 'objects', 'arrays' or 'resources'
                if(!is_scalar($key) or !is_scalar($value)) { 
                    throw new BadRequestHttpException('Bad Request');
                }
                // Проверяем чтобы имя атрибута не было зарезервированным, например 'q' или 'sort' и 
                // соответствовало одному из атрибутов содержащихся в модели.
                if (!in_array(strtolower($key), $this->reservedParams) 
                    && ArrayHelper::keyExists($key, $modelAttr, false)) { 
                    $search[$key] = $value;
                } else { throw new BadRequestHttpException('Bad Request');}
            }
        }

        // Здесь вы можете реализовать и возвратить экземпляр 'ActiveDataProvider.
        // в моем случае я предпочитаю использовать встроенный Search Class сгенерированный в Gii 
        // который уже выполняет валидацию и использует 'like' всякий раз, когда атрибут ожидает 'string' значение.
        
        // you may implement and return your 'ActiveDataProvider' instance here.
        // in my case I prefer using the built in Search Class generated by Gii which is already 
        // performing validation and using 'like' whenever the attr is expecting a 'string' value.
        $searchByAttr[$this->searchAttr] = $search;
        
        $searchModel = new $this->searchModel;
        
        // возвращаем отфильтрованные данные
        return $searchModel->search($searchByAttr);     
    }
    
    public function behaviors()
    {
        $behaviors = parent::behaviors();
        $behaviors['authenticator'] = [
            'class' => CompositeAuth::className(),
            'authMethods' => [
                [
                    'class' => HttpBasicAuth::className(),
                    'auth' => function ($email, $password) {
                        if ($authUser = \app\models\Users::validateUser($email, $password)) {
                            $authHeader = $authUser->access_token;
                            $response = \Yii::$app->response;
                            $response->getHeaders()->set('Autorization', 'Bearer '.$authHeader);
                            return $authUser;
                        }
                    }
                                        
                    //Тренировки и игры с кешированием
                    
                    /*'auth' => function ($email, $password) {                        
                        
                        $cache = \Yii::$app->cache;
                        $options = [$email, $password];
                        $key = $email . $password; //md5(serialize($options));
                        //$cache->flush();
                        if ($cache->get($key)) {
                            $result = $cache->get($key);
                            var_dump($result);
                        } else {
                            $result = \app\models\Users::findOne([
                                'email' => $email,
                                'password' => $password,
                            ]);
                            $cache->set($key, $result, 5);
                        }
                        return $result;                        
                    }*/
                ],
                [
                    'class' => HttpBearerAuth::className(),
                ]
            ],
        ];
        //$behaviors['authenticator']['only'] = ['index'];
        return $behaviors;
    }
    
}